/*
 * Copyright (c) 2018-2019, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include "dt-bindings/clock/tegra194-clock.h"

#define CAM0_RST_L	TEGRA194_MAIN_GPIO(H, 3)
#define CAMERA_I2C_MUX_BUS(x) (0x1E + x)

/* camera control gpio definitions */

/ {
	host1x {

		i2c@c250000 {

			tca9546@72 {
				compatible = "nxp,pca9546";
				reg = <0x72>;
				#address-cells = <1>;
				#size-cells = <0>;
				skip_mux_detect = "yes";
				vif-supply = <&p2822_vdd_1v8_cvb>;
				vcc-supply = <&p2822_vdd_1v8_cvb>;
				vcc_lp = "vcc";
				force_bus_start = <CAMERA_I2C_MUX_BUS(0)>;

				// I2C mux select 0 on JCB002
				i2c@0 {
					dser_a_ar0820:max9296@48 {
						compatible = "nvidia,max9296";
						reg = <0x48>;
						csi-mode = "2x4";
						max-src = <1>;
						reset-gpios =  <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
					};

					ser_a_ar0820:max9295_prim@62 {
						compatible = "nvidia,max9295";
						reg = <0x62>;
					};

					ar0820_a:ar0820@10 {
						compatible = "nvidia,ar0820";
						reg = <0x10>;
						def-addr = <0x10>;
						reg_mux = <0x1>;
						physical_w = "15.0";
						physical_h = "12.5";
						sensor_model = "ar0820";
						post_crop_frame_drop = [30 00];
						use_decibel_gain = "true";
						use_sensor_mode_id = "true";
						clocks = <0x4 0x24 0x4 0x24>;
						clock-names = "extperiph1", "pllp_grtba";
						mclk = "extperiph1";
						nvidia,gmsl-ser-device = <&ser_a_ar0820>;
						nvidia,gmsl-dser-device = <&dser_a_ar0820>;	

						ports {
							reg = <0x0>;

							ar0820_a_out:endpoint {
								vc-id = <0x0>;
								port-index = <0x4>;
								bus-width = <0x4>;
								remote-endpoint = <&csi_chan0_port0>;
							};
						};

						gmsl-link {
							src-csi-port = "b";
							dst-csi-port = "a";
							serdes-csi-link = "a";
							csi-mode = "1x4";
							st-vc = <0x0>;
							vc-id = <0x0>;
							num-lanes = <0x4>;
							streams = "raw12";
						};
					};
				};

				// I2C mux select 1 on JCB002
				i2c@1 {
					dser_b_ar0820:max9296@48 {
						compatible = "nvidia,max9296";
						reg = <0x48>;
						csi-mode = "2x4";
						max-src = <1>;
						reset-gpios =  <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
					};

					ser_b_ar0820:max9295_prim@62 {
						compatible = "nvidia,max9295";
						reg = <0x62>;
					};

					ar0820_b:ar0820@10 {
						compatible = "nvidia,ar0820";
						reg = <0x10>;
						def-addr = <0x10>;
						reg_mux = <0x1>;
						physical_w = "15.0";
						physical_h = "12.5";
						sensor_model = "ar0820";
						post_crop_frame_drop = [30 00];
						use_decibel_gain = "true";
						use_sensor_mode_id = "true";
						clocks = <0x4 0x24 0x4 0x24>;
						clock-names = "extperiph1", "pllp_grtba";
						mclk = "extperiph1";
						nvidia,gmsl-ser-device = <&ser_b_ar0820>;
						nvidia,gmsl-dser-device = <&dser_b_ar0820>;	

						ports {
							reg = <0x0>;

							ar0820_b_out:endpoint {
								vc-id = <0x0>;
								port-index = <0x4>;
								bus-width = <0x4>;
								remote-endpoint = <&csi_chan1_port0>;
							};
						};

						gmsl-link {
							src-csi-port = "b";
							dst-csi-port = "a";
							serdes-csi-link = "a";
							csi-mode = "1x4";
							st-vc = <0x0>;
							vc-id = <0x0>;
							num-lanes = <0x4>;
							streams = "raw12";
						};
					};
				};


				// I2C mux select 2 on JCB002
				i2c@2 {
					dser_c_ar0820:max9296@48 {
						compatible = "nvidia,max9296";
						reg = <0x48>;
						csi-mode = "2x4";
						max-src = <1>;
						reset-gpios =  <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
					};

					ser_c_ar0820:max9295_prim@62 {
						compatible = "nvidia,max9295";
						reg = <0x62>;
					};

					ar0820_c:ar0820@10 {
						compatible = "nvidia,ar0820";
						reg = <0x10>;
						def-addr = <0x10>;
						reg_mux = <0x1>;
						physical_w = "15.0";
						physical_h = "12.5";
						sensor_model = "ar0820";
						post_crop_frame_drop = [30 00];
						use_decibel_gain = "true";
						use_sensor_mode_id = "true";
						clocks = <0x4 0x24 0x4 0x24>;
						clock-names = "extperiph1", "pllp_grtba";
						mclk = "extperiph1";
						nvidia,gmsl-ser-device = <&ser_c_ar0820>;
						nvidia,gmsl-dser-device = <&dser_c_ar0820>;	

						ports {
							reg = <0x0>;

							ar0820_c_out:endpoint {
								vc-id = <0x0>;
								port-index = <0x4>;
								bus-width = <0x4>;
								remote-endpoint = <&csi_chan2_port0>;
							};
						};

						gmsl-link {
							src-csi-port = "b";
							dst-csi-port = "a";
							serdes-csi-link = "a";
							csi-mode = "1x4";
							st-vc = <0x0>;
							vc-id = <0x0>;
							num-lanes = <0x4>;
							streams = "raw12";
						};
					};
				};

			
				// I2C mux select 1 on JCB002
				i2c@3 {
					dser_d_ar0820:max9296@48 {
						compatible = "nvidia,max9296";
						reg = <0x48>;
						csi-mode = "2x4";
						max-src = <1>;
						reset-gpios =  <&tegra_main_gpio CAM0_RST_L GPIO_ACTIVE_HIGH>;
					};

					ser_d_ar0820:max9295_prim@62 {
						compatible = "nvidia,max9295";
						reg = <0x62>;
					};

					ar0820_d:ar0820@10 {
						compatible = "nvidia,ar0820";
						reg = <0x10>;
						def-addr = <0x10>;
						reg_mux = <0x1>;
						physical_w = "15.0";
						physical_h = "12.5";
						sensor_model = "ar0820";
						post_crop_frame_drop = [30 00];
						use_decibel_gain = "true";
						use_sensor_mode_id = "true";
						clocks = <0x4 0x24 0x4 0x24>;
						clock-names = "extperiph1", "pllp_grtba";
						mclk = "extperiph1";
						nvidia,gmsl-ser-device = <&ser_d_ar0820>;
						nvidia,gmsl-dser-device = <&dser_d_ar0820>;	

						ports {
							reg = <0x0>;

							ar0820_d_out:endpoint {
								vc-id = <0x0>;
								port-index = <0x4>;
								bus-width = <0x4>;
								remote-endpoint = <&csi_chan4_port0>;
							};
						};

						gmsl-link {
							src-csi-port = "b";
							dst-csi-port = "a";
							serdes-csi-link = "a";
							csi-mode = "1x4";
							st-vc = <0x0>;
							vc-id = <0x0>;
							num-lanes = <0x4>;
							streams = "raw12";
						};
					};
				};
			};	
		};


		vi_base: vi@15c10000 {
			ports {
				vi_port0: port@0 {
					status = "okay";
					vi_in0: endpoint {
						vc-id = <0>;
						port-index = <5>;
						bus-width = <0x4>;
						status = "okay";
					};
				};
				vi_port1: port@1 {
					status = "okay";
					vi_in1: endpoint {
						vc-id = <0>;
						port-index = <4>;
						bus-width = <0x4>;
						status = "okay";
					};
				};
				vi_port2: port@2 {
					status = "okay";
					vi_in2: endpoint {
						vc-id = <0>;
						port-index = <2>;
						bus-width = <0x4>;
						status = "okay";
					};
				};
				vi_port3: port@3 {
					status = "okay";
					vi_in3: endpoint {
						vc-id = <0>;
						port-index = <0>;
						bus-width = <0x4>;
						status = "okay";
					};
				};
				vi_port4: port@4 {
					status = "disabled";
					vi_in4: endpoint {
						vc-id = <0>;
						status = "disabled";
					};
				};
				vi_port5: port@5 {
					status = "disabled";
					vi_in5: endpoint {
						vc-id = <0>;
						status = "disabled";
					};
				};
			};
		};

		csi_base: nvcsi@15a00000 {
			num-tpg-channels = <36>;
			csi_chan0: channel@0 {
				status = "okay";
				ports {					
					csi_chan0_port0: port@0 {
						status = "okay";
						csi_in0: endpoint@0 {
							status = "okay";
							port-index = <6>;
							bus-width  = <4>;
							remote-endpoint = <&ar0820_a_out>;

						};
					};
					csi_chan0_port1: port@1 {
						status = "okay";
						csi_out0: endpoint@1 {
							remote-endpoint = <&vi_port0>;
							status = "okay";
						};
					};
				};
			};
			csi_chan1: channel@1 {
				status = "okay";
				ports {
					csi_chan1_port0: port@0 {
						status = "okay";
						csi_in1: endpoint@2 {
							status = "okay";
							port-index = <0x4>;
							bus-width = <0x4>;							
							remote-endpoint = <&ar0820_b_out>;
						};
					};
					csi_chan1_port1: port@1 {
						status = "okay";
						csi_out1: endpoint@3 {
							remote-endpoint = <&vi_port1>;
							status = "okay";
						};
					};
				};
			};
			csi_chan2: channel@2 {
				status = "okay";
				ports {
					csi_chan2_port0: port@0 {
						status = "okay";
						csi_in2: endpoint@4 {
							status = "okay";
							port-index = <0x2>;
							bus-width = <0x4>;							
							remote-endpoint = <&ar0820_c_out>;
						};
					};
					csi_chan2_port1: port@1 {
						status = "okay";
						csi_out2: endpoint@5 {
							remote-endpoint = <&vi_port2>;
							status = "okay";
						};
					};
				};
			};
			csi_chan3: channel@3 {
				status = "okay";
				ports {
					csi_chan3_port0: port@0 {
						status = "okay";
						csi_in3: endpoint@6 {
							status = "okay";
							port-index = <0x0>;
							bus-width = <0x4>;							
							remote-endpoint = <&ar0820_d_out>;
						};
					};
					csi_chan3_port1: port@1 {
						status = "okay";
						csi_out3: endpoint@7 {
							remote-endpoint = <&vi_port3>;
							status = "okay";
						};
					};
				};
			};
			csi_chan4: channel@4 {
				status = "disabled";
				ports {
					csi_chan4_port0: port@0 {
						status = "disabled";
						csi_in4: endpoint@8 {
							status = "disabled";
						};
					};
					csi_chan4_port1: port@1 {
						status = "disabled";
						csi_out4: endpoint@9 {
							status = "disabled";
						};
					};
				};
			};
			csi_chan5: channel@5 {
				status = "disabled";
				ports {
					csi_chan5_port0: port@0 {
						status = "disabled";
						csi_in5: endpoint@10 {
							status = "disabled";
						};
					};
					csi_chan5_port1: port@1 {
						status = "disabled";
						csi_out5: endpoint@11 {
							status = "disabled";
						};
					};
				};
			};
		};
	};
};
